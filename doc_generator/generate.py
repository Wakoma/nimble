
import os
import json
from pathlib import Path
import shutil

import cadquery as cq

from utility.export import export_svg
from utility.export import export_stl
from utility.export import export_step

import mechanical.components.cadquery.rack_leg as rack_leg
import mechanical.components.cadquery.nimble_top as nimble_top
import mechanical.components.cadquery.nimble_end_plate as nimble_end_plate
import mechanical.components.cadquery.nimble_tray as nimble_tray



def generate_docs(config, config_hash, force_rebuild=True):
    """
    generate all models and update documentation
    """

    # parameters

    #TODO: get from input
    #selected_devices_ids = config.devices
    selected_devices_ids = ['NUC10i5FNH','RPi4']

    # get path of this python file
    module_path = Path(__file__).resolve().parent

    build_dir = module_path  / "build" / config_hash
    build_dir = build_dir.resolve()
    build_dir_identification_file = "NIMBLE_BUILD"

    if os.path.exists(build_dir):
        if force_rebuild:
            # for safety, only delete if build dir is identified as such
            if not os.path.exists(build_dir / build_dir_identification_file):
                print("build dir exists but is not identified as such, refusing to delete")
                raise Exception("build dir exists but is not identified as such, refusing to delete")
            shutil.rmtree(build_dir)
        else:
            print("build dir already exists, skipping")
            return
        
    json_filename = module_path / "devices.json"
    outputdir_gitbuilding = build_dir / "gitbuilding/"
    outputdir_stl = outputdir_gitbuilding / "models"
    outputdir_svg = outputdir_gitbuilding / "svg"
    outputdir_step = build_dir / "step"

    beam_length = 294
    single_width = 155

    # set up build env

    try:
        os.mkdir(build_dir)
        with open(build_dir / build_dir_identification_file, 'w') as f:
            f.write("The contents of this directory are generated by the NIMBLE build system. Do not edit manually.")
        os.mkdir(outputdir_gitbuilding)
        os.mkdir(outputdir_stl)
        os.mkdir(outputdir_svg)
        os.mkdir(outputdir_step)
    except:
        print("failed to create output dir")
        raise


    # read json, select entries

    selected_devices = []
    with open(json_filename) as json_file:
        data = json.load(json_file)
        selected_devices = [x for x in data if x['ID'] in selected_devices_ids]
    print([x['ID'] for x in selected_devices])

    # create the models and assembly

    beam = rack_leg.make_rack_leg(beam_length)
    plate = nimble_end_plate.create(width=single_width, height=single_width)

    listOfTrays = []
    for device in selected_devices:
        tray = nimble_tray.create(device['HeightInUnits'])
        listOfTrays.append((tray, device))


    def createAssembly(step):
        assembly = cq.Assembly()
        if step >= 1:
            plate.rotateAboutCenter((1, 0, 0), 0)
            assembly.add(plate, name="baseplate", loc=cq.Location((0, 0, 0)))
        if step >= 2:
            #25, 42, 55
            beam_height = 4
            for tray in listOfTrays:
                if tray[1]['HeightInUnits'] == 2:
                    beam_height += 27
                elif  tray[1]['HeightInUnits'] == 3:
                    beam_height += 42
                elif  tray[1]['HeightInUnits'] == 4:
                    beam_height += 55
            assembly.add(rack_leg.make_rack_leg(length=beam_height), name="beam1", loc=cq.Location((-single_width / 2.0 + 10, -single_width / 2.0 + 10, 3)))
            assembly.add(rack_leg.make_rack_leg(length=beam_height), name="beam2", loc=cq.Location((single_width / 2.0 - 10, -single_width / 2.0 + 10, 3)))
            assembly.add(rack_leg.make_rack_leg(length=beam_height), name="beam3", loc=cq.Location((single_width / 2.0 - 10, single_width / 2.0 - 10, 3)))
            assembly.add(rack_leg.make_rack_leg(length=beam_height), name="beam4", loc=cq.Location((-single_width / 2.0 + 10, single_width / 2.0 - 10, 3)))
        if step >= 3:
            topplate = nimble_end_plate.create(width=single_width, height=single_width)
            topplate = topplate.rotateAboutCenter((1, 0, 0), 180)
            topplate = topplate.rotateAboutCenter((0, 0, 1), 180)
            assembly.add(topplate, name="topplate", loc=cq.Location((0, 0, beam_height + 3)))
        if step >= 4:
            index = 0
            for (tray, trayInfo) in listOfTrays:
                assembly.add(tray, loc=cq.Location((-115/2, -155/2-4, 4+index*trayInfo['HeightInUnits'] * 27/2)))
                index = index+1
        return (
            assembly.toCompound() 
            .rotate((0,0,0), (1,0,0), -90) # z should be up
            .rotate((0,0,0), (0,1,0), 10) # rotate a bit around up axis for better view
        )


    # export SVGs

    export_svg(createAssembly(1), outputdir_svg / "baseplate.svg") 
    export_svg(createAssembly(2), outputdir_svg / "baseplate_beams.svg") 
    export_svg(createAssembly(3), outputdir_svg / "baseplate_beams_topplate.svg") 
    export_svg(createAssembly(4), outputdir_svg / "trays.svg") 

    # export STLs and STEPs

    partList = []

    def exportPart(part, name, long_name):    
        stl_file = outputdir_stl / (name + ".stl")
        step_file = outputdir_step / (name + ".step")
        export_stl(part, str(stl_file))
        export_step(part, str(step_file)) #not needed right now
        partList.append((name, long_name))

    exportPart(beam, "beam", "3D printed beam")
    exportPart(plate, "baseplate", "3D printed base plate")
    exportPart(plate, "topplate", "3D printed top plate")

    for (part, device) in listOfTrays:
        exportPart(part, "tray_"+device['ID'], f"tray for {device['Name']}")


    # write gitbuilding files

    with open(outputdir_gitbuilding / '3dprintingparts.md', 'w') as f:
        f.write("# 3D print all the needed files\n\n")
        for (part,long_name) in partList:
            f.write("* %s.stl ([preview](models/%s.stl){previewpage}, [download](models/%s.stl))\n" % (part, part, part))
            f.write('\n\nYou can [download all of the STLs as a single zipfile](stlfiles.zip){zip, pattern:"*.stl"}')



    with open(outputdir_gitbuilding / '3DPParts.yaml', 'w') as f:
        for (part,long_name) in partList:
            f.write("%s:\n" % (part))
            f.write("    Name: %s\n" % (long_name))
            f.write("    Specs:\n")
            f.write("        Filename: %s.stl\n" % (part))
            #f.write("        Filename: %s.stl ([download](models/%s.stl))\n" % (part, part))
            f.write("        Manufacturing: 3D Printing\n")
            f.write("        Material: PLA or PETG\n")
            #f.write("        Preview: [preview](models/beam.stl){previewpage}\n")

    with open(outputdir_gitbuilding / 'DeviceParts.yaml', 'w') as f:
        for (part, device) in listOfTrays:
            f.write("%s:\n" % (device['ID']))
            f.write("    Name: %s\n" % (device['Name']))
            f.write("    Specs:\n")
            for k in device.keys():
                f.write("        %s: %s\n" % (k, device[k]))

    with open(outputdir_gitbuilding / 'components.md', 'w') as f:
        f.write("# Installing the components in trays\n\n")
        f.write("{{BOM}}\n")
        f.write("![](svg/baseplate_beams_topplate.svg)\n\n")
        f.write("For all of your components:\n\n")
        f.write("* find the corresponding 3d printed tray\n")
        f.write("* install the tray on the rack\n")
        f.write("* mount the device on the tray\n\n")
        f.write("Here are the devices and the trays\n\n")
        for (part, device) in listOfTrays:
            f.write("* [%s](DeviceParts.yaml#%s){Qty: 1}\n" % (device['Name'], device['ID']))
            stlfile = F"tray_{device['ID']}.stl"
            f.write("* %s ([preview](models/%s){previewpage}, [download](models/%s))\n" % (stlfile, stlfile, stlfile))
            f.write("![](svg/trays.svg)")

    print("Finished build for config_hash: " + config_hash)


# if main script, run generate_docs with test config
if __name__ == "__main__":
    config = {'config': {'server_1': 'Hardware_1', 'router_1': 'Hardware_2', 'switch_1': 'Hardware_9', 'charge_controller_1': 'Hardware_4'}}
    generate_docs(config, "test_config_hash")